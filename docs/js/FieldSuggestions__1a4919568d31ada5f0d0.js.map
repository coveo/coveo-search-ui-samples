{"version":3,"sources":["./src/ui/FieldSuggestions/FieldSuggestions.ts","./src/ui/Misc/SuggestionForOmnibox.ts","./sass/_FieldSuggestions.scss"],"names":[],"mappings":"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","file":"FieldSuggestions__1a4919568d31ada5f0d0.js","sourcesContent":["import { ISuggestionForOmniboxOptions, SuggestionForOmnibox, ISuggestionForOmniboxTemplate } from '../Misc/SuggestionForOmnibox';\nimport { Component } from '../Base/Component';\nimport { ComponentOptions, IFieldOption } from '../Base/ComponentOptions';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { Assert } from '../../misc/Assert';\nimport { Utils } from '../../utils/Utils';\nimport { OmniboxEvents, IPopulateOmniboxEventArgs } from '../../events/OmniboxEvents';\nimport { IIndexFieldValue } from '../../rest/FieldValue';\nimport { IListFieldValuesRequest } from '../../rest/ListFieldValuesRequest';\nimport { QueryStateModel } from '../../models/QueryStateModel';\nimport { Initialization } from '../Base/Initialization';\nimport { analyticsActionCauseList, IAnalyticsNoMeta } from '../Analytics/AnalyticsActionListMeta';\nimport { $$ } from '../../utils/Dom';\nimport { ISuggestionForOmniboxOptionsOnSelect } from '../Misc/SuggestionForOmnibox';\nimport { IStringMap } from '../../rest/GenericParam';\nimport * as _ from 'underscore';\nimport { exportGlobally } from '../../GlobalExports';\nimport 'styling/_FieldSuggestions';\n\nexport interface IFieldSuggestionsOptions extends ISuggestionForOmniboxOptions {\n  field?: IFieldOption;\n  queryOverride?: string;\n}\n\n/**\n * The `FieldSuggestions` component provides query suggestions based on a particular facet field. For example, you could\n * use this component to provide auto-complete suggestions while the end user is typing the title of an item.\n *\n * The query suggestions provided by this component appear in the [`Omnibox`]{@link Omnibox} component.\n */\nexport class FieldSuggestions extends Component {\n  static ID = 'FieldSuggestions';\n\n  static doExport = () => {\n    exportGlobally({\n      FieldSuggestions: FieldSuggestions\n    });\n  };\n\n  /**\n   * @componentOptions\n   */\n  static options: IFieldSuggestionsOptions = {\n    /**\n     * Specifies the facet field from which to provide suggestions.\n     *\n     * Specifying a value for this option is required for the `FieldSuggestions` component to work.\n     */\n    field: ComponentOptions.buildFieldOption({ required: true }),\n\n    /**\n     * Specifies a query override to apply when retrieving suggestions. You can use any valid query expression (see\n     * [Coveo Query Syntax Reference](http://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).\n     *\n     * Default value is the empty string, and the component applies no query override.\n     */\n    queryOverride: ComponentOptions.buildStringOption({ defaultValue: '' }),\n\n    /**\n     * Specifies the z-index position at which the suggestions render themselves in the [`Omnibox`]{@link Omnibox}.\n     *\n     * When there are multiple suggestion providers, components with higher `omniboxZIndex` values render themselves\n     * first.\n     *\n     * Default value is `51`. Minimum value is `0`.\n     */\n    omniboxZIndex: ComponentOptions.buildNumberOption({ defaultValue: 51, min: 0 }),\n\n    /**\n     * Specifies the title of the result suggestions group in the [`Omnibox`]{@link Omnibox} component.\n     * If not provided, the component will simply not output any title.\n     *\n     * Default value is `null`.\n     */\n    headerTitle: ComponentOptions.buildLocalizedStringOption(),\n\n    /**\n     * Specifies the number of suggestions to render in the [`Omnibox`]{@link Omnibox}.\n     *\n     * Default value is `5`. Minimum value is `1`.\n     */\n    numberOfSuggestions: ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1 }),\n\n    /**\n     * Specifies the event handler function to execute when the end user selects a suggested value in the\n     * [`Omnibox`]{@link Omnibox}. By default, the query box text is replaced by what the end user selected and a new\n     * query is executed. You can, however, replace this default behavior by providing a callback function to execute\n     * when the value is selected.\n     *\n     * **Note:**\n     * > You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\n     * > [`init`]{@link init} call of your search interface (see\n     * > [Components - Passing Component Options in the init Call](https://developers.coveo.com/x/PoGfAQ#Components-PassingComponentOptionsintheinitCall)),\n     * > or before the `init` call, using the `options` top-level function (see\n     * > [Components - Passing Component Options Before the init Call](https://developers.coveo.com/x/PoGfAQ#Components-PassingComponentOptionsBeforetheinitCall)).\n     *\n     * **Example:**\n     *\n     * ```javascript\n     *\n     * var myOnSelectFunction = function(selectedValue, populateOmniboxEventArgs) {\n     *\n     *   // Close the suggestion list when the user clicks a suggestion.\n     *   populateOmniboxEventArgs.closeOmnibox();\n     *\n     *   // Search for matching title results in the default endpoint.\n     *   Coveo.SearchEndpoint.endpoints[\"default\"].search({\n     *     q: \"@title=='\" + selectedValue + \"'\"\n     *   }).done(function(results) {\n     *\n     *     // If more than one result is found, select a result that matches the selected title.\n     *     var foundResult = Coveo._.find(results.results, function(result) {\n     *       return selectedValue == result.raw.title;\n     *     });\n     *\n     *     // Open the found result in the current window, or log an error.\n     *     if (foundResult) {\n     *       window.location = foundResult.clickUri;\n     *     }\n     *     else {\n     *       new Coveo.Logger.warn(\"Selected suggested result '\" + selectedValue + \"' not found.\");\n     *     }\n     *   });\n     * };\n     *\n     * // You can set the option in the 'init' call:\n     * Coveo.init(document.querySelector(\"#search\"), {\n     *    FieldSuggestions : {\n     *      onSelect : myOnSelectFunction\n     *    }\n     * });\n     *\n     * // Or before the 'init' call, using the 'options' top-level function:\n     * // Coveo.options(document.querySelector(\"#search\"), {\n     * //   FieldSuggestions : {\n     * //     onSelect : myOnSelectFunction\n     * //   }\n     * // });\n     * ```\n     */\n    onSelect: ComponentOptions.buildCustomOption<ISuggestionForOmniboxOptionsOnSelect>(() => {\n      return null;\n    })\n  };\n\n  private suggestionForOmnibox: SuggestionForOmnibox;\n  private currentlyDisplayedSuggestions: { [suggestion: string]: { element: HTMLElement; pos: number } };\n\n  /**\n   * Creates a new `FieldSuggestions` component.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the `FieldSuggestions` component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   */\n  constructor(element: HTMLElement, public options: IFieldSuggestionsOptions, bindings?: IComponentBindings) {\n    super(element, FieldSuggestions.ID, bindings);\n\n    if (this.options && 'omniboxSuggestionOptions' in this.options) {\n      this.options = _.extend(this.options, this.options['omniboxSuggestionOptions']);\n    }\n\n    this.options = ComponentOptions.initComponentOptions(element, FieldSuggestions, options);\n\n    Assert.check(Utils.isCoveoField(<string>this.options.field), this.options.field + ' is not a valid field');\n\n    this.options.onSelect = this.options.onSelect || this.onRowSelection;\n\n    let rowTemplate = (toRender: IStringMap<string>) => {\n      let rowElement = $$('div', {\n        className: 'magic-box-suggestion coveo-omnibox-selectable coveo-top-field-suggestion-row'\n      });\n      if (toRender['data']) {\n        rowElement.el.innerHTML = toRender['data'];\n      }\n      return rowElement.el.outerHTML;\n    };\n\n    let suggestionStructure: ISuggestionForOmniboxTemplate;\n    if (this.options.headerTitle == null) {\n      suggestionStructure = {\n        row: rowTemplate\n      };\n    } else {\n      let headerTemplate = () => {\n        let headerElement = $$('div', {\n          className: 'coveo-top-field-suggestion-header'\n        });\n\n        let iconElement = $$('span', {\n          className: 'coveo-icon-top-field'\n        });\n\n        let captionElement = $$('span', {\n          className: 'coveo-caption'\n        });\n\n        if (this.options.headerTitle) {\n          captionElement.text(this.options.headerTitle);\n        }\n\n        headerElement.append(iconElement.el);\n        headerElement.append(captionElement.el);\n\n        return headerElement.el.outerHTML;\n      };\n\n      suggestionStructure = {\n        header: { template: headerTemplate, title: this.options.headerTitle },\n        row: rowTemplate\n      };\n    }\n\n    this.suggestionForOmnibox = new SuggestionForOmnibox(\n      suggestionStructure,\n      (value: string, args: IPopulateOmniboxEventArgs) => {\n        this.options.onSelect.call(this, value, args);\n      },\n      (value: string, args: IPopulateOmniboxEventArgs) => {\n        this.onRowTab(value, args);\n      }\n    );\n    this.bind.onRootElement(OmniboxEvents.populateOmnibox, (args: IPopulateOmniboxEventArgs) => this.handlePopulateOmnibox(args));\n  }\n\n  public selectSuggestion(suggestion: number);\n  public selectSuggestion(suggestion: string);\n\n  /**\n   * Selects a currently displayed query suggestion. This implies that at least one suggestion must have been returned\n   * at least once.\n   * @param suggestion Either a number (0-based index position of the query suggestion to select) or a string that\n   * matches the suggestion to select.\n   */\n  public selectSuggestion(suggestion: any) {\n    if (this.currentlyDisplayedSuggestions) {\n      if (isNaN(suggestion)) {\n        if (this.currentlyDisplayedSuggestions[suggestion]) {\n          $$(this.currentlyDisplayedSuggestions[suggestion].element).trigger('click');\n        }\n      } else {\n        let currentlySuggested = <{ element: HTMLElement; pos: number }>_.findWhere(<any>this.currentlyDisplayedSuggestions, {\n          pos: suggestion\n        });\n        if (currentlySuggested) {\n          $$(currentlySuggested.element).trigger('click');\n        }\n      }\n    }\n  }\n\n  private handlePopulateOmnibox(args: IPopulateOmniboxEventArgs) {\n    Assert.exists(args);\n\n    let valueToSearch = args.completeQueryExpression.word;\n    let promise = new Promise(resolve => {\n      this.queryController\n        .getEndpoint()\n        .listFieldValues(this.buildListFieldValueRequest(valueToSearch))\n        .then((results: IIndexFieldValue[]) => {\n          let element = this.suggestionForOmnibox.buildOmniboxElement(results, args);\n          this.currentlyDisplayedSuggestions = {};\n          if (element) {\n            _.map($$(element).findAll('.coveo-omnibox-selectable'), (selectable, i?) => {\n              this.currentlyDisplayedSuggestions[$$(selectable).text()] = {\n                element: selectable,\n                pos: i\n              };\n            });\n            resolve({\n              element: element,\n              zIndex: this.options.omniboxZIndex\n            });\n          } else {\n            resolve({\n              element: undefined\n            });\n          }\n        })\n        .catch(() => {\n          resolve({\n            element: undefined\n          });\n        });\n    });\n    args.rows.push({\n      deferred: promise\n    });\n  }\n\n  private onRowSelection(value: string, args: IPopulateOmniboxEventArgs) {\n    args.clear();\n    args.closeOmnibox();\n    this.queryStateModel.set(QueryStateModel.attributesEnum.q, value);\n    this.usageAnalytics.logSearchEvent<IAnalyticsNoMeta>(analyticsActionCauseList.omniboxField, {});\n    this.queryController.executeQuery();\n  }\n\n  private onRowTab(value: string, args: IPopulateOmniboxEventArgs) {\n    args.clear();\n    args.closeOmnibox();\n    this.queryStateModel.set(QueryStateModel.attributesEnum.q, `${value}`);\n    this.usageAnalytics.logCustomEvent(analyticsActionCauseList.omniboxField, {}, this.element);\n  }\n\n  private buildListFieldValueRequest(valueToSearch: string): IListFieldValuesRequest {\n    return {\n      field: <string>this.options.field,\n      ignoreAccents: true,\n      sortCriteria: 'occurrences',\n      maximumNumberOfValues: this.options.numberOfSuggestions,\n      patternType: 'Wildcards',\n      pattern: '*' + valueToSearch + '*',\n      queryOverride: this.options.queryOverride\n    };\n  }\n}\n\nInitialization.registerAutoCreateComponent(FieldSuggestions);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FieldSuggestions/FieldSuggestions.ts","import { IPopulateOmniboxEventArgs } from '../../events/OmniboxEvents';\nimport { DomUtils } from '../../utils/DomUtils';\nimport { $$ } from '../../utils/Dom';\nimport * as _ from 'underscore';\n\nexport interface ISuggestionForOmniboxOptionsOnSelect {\n  (value: string, args: IPopulateOmniboxEventArgs): void;\n}\n\nexport interface ISuggestionForOmniboxOptions {\n  omniboxZIndex?: number;\n  headerTitle?: string;\n  onSelect?: ISuggestionForOmniboxOptionsOnSelect;\n  numberOfSuggestions?: number;\n}\n\nexport interface ISuggestionForOmniboxTemplate {\n  header?: {\n    template: (...args: any[]) => string;\n    title: string;\n  };\n  row: (...args: any[]) => string;\n}\n\nexport interface ISuggestionForOmniboxResult {\n  value: string;\n}\n\nexport class SuggestionForOmnibox {\n  constructor(\n    public structure: ISuggestionForOmniboxTemplate,\n    public onSelect: (value: string, args: IPopulateOmniboxEventArgs) => void,\n    public onTabPress: (value: string, args: IPopulateOmniboxEventArgs) => void\n  ) {}\n\n  public buildOmniboxElement(results: ISuggestionForOmniboxResult[], args: IPopulateOmniboxEventArgs): HTMLElement {\n    let element: HTMLElement;\n    if (results.length != 0) {\n      element = $$('div').el;\n      if (this.structure.header) {\n        let header = this.buildElementHeader();\n        element.appendChild(header);\n      }\n      let rows = this.buildRowElements(results, args);\n      _.each(rows, row => {\n        element.appendChild(row);\n      });\n    }\n    return element;\n  }\n\n  private buildElementHeader(): HTMLElement {\n    return $$(\n      'div',\n      undefined,\n      this.structure.header.template({\n        headerTitle: this.structure.header.title\n      })\n    ).el;\n  }\n\n  private buildRowElements(results: ISuggestionForOmniboxResult[], args: IPopulateOmniboxEventArgs): HTMLElement[] {\n    let ret = [];\n    _.each(results, result => {\n      let row = $$(\n        'div',\n        undefined,\n        this.structure.row({\n          rawValue: result.value,\n          data: DomUtils.highlightElement(result.value, args.completeQueryExpression.word)\n        })\n      ).el;\n      $$(row).on('click', () => {\n        this.onSelect.call(this, result.value, args);\n      });\n      $$(row).on('keyboardSelect', () => {\n        this.onSelect.call(this, result.value, args);\n      });\n      $$(row).on('tabSelect', () => {\n        this.onTabPress.call(this, result.value, args);\n      });\n      ret.push(row);\n    });\n    return ret;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Misc/SuggestionForOmnibox.ts","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/_FieldSuggestions.scss\n// module id = 331\n// module chunks = 29 41 78"],"sourceRoot":""}