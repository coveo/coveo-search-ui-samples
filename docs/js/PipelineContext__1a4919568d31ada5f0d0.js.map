{"version":3,"sources":["./src/ui/PipelineContext/PipelineContext.ts"],"names":[],"mappings":"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","file":"PipelineContext__1a4919568d31ada5f0d0.js","sourcesContent":["import { Component } from '../Base/Component';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { Utils } from '../../utils/Utils';\nimport { QueryEvents, IBuildingQueryEventArgs } from '../../events/QueryEvents';\nimport { $$ } from '../../utils/Dom';\nimport { Initialization } from '../Base/Initialization';\nimport * as _ from 'underscore';\nimport { exportGlobally } from '../../GlobalExports';\nimport { Context, IPipelineContextProvider } from './PipelineGlobalExports';\n\ndeclare const Coveo;\n\nexport interface IPipelineContextOptions {}\n\n/**\n * A PipelineContext is used to add contextual information about the environment inside which the query is executed.\n *\n * It allows to pass arbitrary key values pairs ( think `JSON` ), which can then be leveraged by the [Query Pipeline](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=108),\n * or by Coveo Machine Learning.\n *\n * This can be any arbitrary information that you can use to contextualize the query and help Coveo improve relevance by returning results tailored to a specific context.\n *\n * This component is meant to be configured using a script tag, with a JSON content.\n *\n * The values can be either a `string` or an array of `string`.\n *\n * ```\n * <script class='CoveoPipelineContext' type='text/context'>\n *   {\n *      \"foo\" : \"bar\",\n *      \"foobar\" : [\"foo\", \"bar\"]\n *   }\n * </script>\n * ```\n *\n * You can also simply use JavaScript code to pass context values, using the {@link QueryBuilder.addContextValue} method.\n *\n * This means you do not necessarily need to use this component to pass context.\n * ```\n * Coveo.$$(root).on('buildingQuery', function(args) {\n *     args.queryBuilder.addContextValue('foo', 'bar');\n * })\n * ```\n *\n * Using this component as opposed to JavaScript code means you will be able to leverage the interface editor.\n *\n * Regardless of if you use this component or JavaScript to add context, both will add the needed data in the [Query.Context]{@link IQuery.context} parameter.\n *\n * **Note:**\n *\n * This component also ensures that the framework properly determines the context in all corner cases, including when a standalone search box ([initSearchbox]{@link initSearchbox}) is displaying query suggestions.\n *\n * In most cases, if you do not use this component, the context will not be resolved and leveraged properly in the query pipeline (see [What Is a Query Pipeline?](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=252)).\n *\n */\nexport class PipelineContext extends Component implements IPipelineContextProvider {\n  static ID = 'PipelineContext';\n  static CURRENT_URL = 'CurrentUrl';\n\n  static doExport = () => {\n    exportGlobally({\n      PipelineContext: PipelineContext\n    });\n  };\n\n  private contextContent: Context = {};\n\n  public constructor(public element: HTMLElement, public options?: IPipelineContextOptions, public bindings?: IComponentBindings) {\n    super(element, PipelineContext.ID, bindings);\n    this.options = ComponentOptions.initComponentOptions(element, PipelineContext, options);\n    this.setContext(\n      $$(this.element)\n        .text()\n        .trim()\n    );\n    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));\n  }\n\n  /**\n   * Set a new context, replacing any value previously set.\n   *\n   * @param newContext The new context to set, which can be directly passed as a JSON, or as a stringified JSON.\n   */\n  public setContext(newContext: string | Context) {\n    if (_.isString(newContext)) {\n      const contextParsed = this.tryParseContextFromString(newContext);\n      this.contextContent = contextParsed;\n    } else {\n      this.contextContent = newContext;\n    }\n  }\n\n  /**\n   * Returns the current context\n   */\n  public getContext(): Context {\n    const keys = this.getContextKeys();\n    return _.object(keys, _.map(keys, key => this.getContextValue(key)));\n  }\n\n  /**\n   * Sets a value for a context key, replacing the previous value if applicable.\n   * @param contextKey\n   * @param contextValue\n   */\n  public setContextValue(contextKey: string, contextValue: string | string[]) {\n    this.contextContent[contextKey] = contextValue;\n  }\n\n  /**\n   * Return all the context keys configured for context.\n   * @returns {string[]}\n   */\n  public getContextKeys(): string[] {\n    return _.keys(this.contextContent);\n  }\n\n  /**\n   * Get the context value associated to the given key.\n   *\n   * If the global variable Coveo.context contains the requested key, this method will return the value contained in Coveo.context instead of the one contained internally.\n   *\n   * This is especially useful in a Coveo for Salesforce context, where context values can be extracted from a backend service.\n   * @param key\n   * @returns {string}\n   */\n  public getContextValue(key: string): string | string[] {\n    const contextValue = this.contextContent[key];\n    if (_.isArray(contextValue)) {\n      const contextValues = [];\n      _.each(this.contextContent[key], value => {\n        contextValues.push(this.getModifiedData(value));\n      });\n      return contextValues;\n    } else if (_.isString(contextValue)) {\n      return this.getModifiedData(contextValue);\n    }\n    return '';\n  }\n\n  private handleBuildingQuery(args: IBuildingQueryEventArgs) {\n    let keys = this.getContextKeys();\n    _.each(keys, (key: string) => {\n      args.queryBuilder.addContextValue(key, this.getContextValue(key));\n    });\n  }\n\n  private tryParseContextFromString(contextAsString: string): Context {\n    if (_.isEmpty(contextAsString)) {\n      return {};\n    }\n    try {\n      // Context could be HTML encoded (eg: Coveo for Salesforce)\n      return JSON.parse(Utils.decodeHTMLEntities(contextAsString));\n    } catch (e) {\n      try {\n        return JSON.parse(contextAsString);\n      } catch (e) {\n        this.logger.error(`Error while trying to parse context from the PipelineContext component`, e);\n        return null;\n      }\n    }\n  }\n\n  private getModifiedData(value: string) {\n    /* We need to modify the data to escape special salesforce characters. eg: {! }\n     If we find the matching value in the global Coveo.context variable, we return that one instead of the one present locally.\n     So, concretely, the component could contain : \n     {\n       \"productName\" : \"{! productValueFromSalesforce }\"\n     }\n\n     This means that in those case, we would try to access Coveo.context.productValueFromSalesforce (which would in theory be a \"real\" product value from salesforce, and not a placeholder/variable)\n    */\n    return value.replace(/\\{\\!([^\\}]+)\\}/g, (all: string, contextKey: string) => {\n      const trimmedKey = contextKey.trim();\n      if (Coveo.context && trimmedKey in Coveo.context) {\n        return Coveo.context[trimmedKey];\n      } else if (trimmedKey == PipelineContext.CURRENT_URL) {\n        return window.location.href;\n      }\n      return '';\n    });\n  }\n}\n\nInitialization.registerAutoCreateComponent(PipelineContext);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/PipelineContext/PipelineContext.ts"],"sourceRoot":""}