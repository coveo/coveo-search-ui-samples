{"version":3,"sources":["./src/utils/SVGDom.ts","./src/ui/FormWidgets/NumericSpinner.ts"],"names":[],"mappings":"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","file":"NumericSpinner__5d8084491af1464dbdb6.js","sourcesContent":["import { IStringMap } from '../rest/GenericParam';\nimport * as _ from 'underscore';\n\nexport class SVGDom {\n  public static addClassToSVGInContainer(svgContainer: HTMLElement, classToAdd: string) {\n    const svgElement = svgContainer.querySelector('svg');\n    svgElement.setAttribute('class', `${SVGDom.getClass(svgElement)}${classToAdd}`);\n  }\n\n  public static removeClassFromSVGInContainer(svgContainer: HTMLElement, classToRemove: string) {\n    const svgElement = svgContainer.querySelector('svg');\n    svgElement.setAttribute('class', SVGDom.getClass(svgElement).replace(classToRemove, ''));\n  }\n\n  public static addStyleToSVGInContainer(svgContainer: HTMLElement, styleToAdd: IStringMap<any>) {\n    const svgElement = svgContainer.querySelector('svg');\n    _.each(styleToAdd, (styleValue, styleKey) => {\n      svgElement.style[styleKey] = styleValue;\n    });\n  }\n\n  private static getClass(svgElement: SVGElement) {\n    const className = svgElement.getAttribute('class');\n    return className ? className + ' ' : '';\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/SVGDom.ts","import { exportGlobally } from '../../GlobalExports';\nimport { l } from '../../strings/Strings';\nimport { $$ } from '../../utils/Dom';\nimport { SVGDom } from '../../utils/SVGDom';\nimport { SVGIcons } from '../../utils/SVGIcons';\nimport { IFormWidget, IFormWidgetSettable } from './FormWidgets';\n\n/**\n * A numeric spinner widget with standard styling.\n */\nexport class NumericSpinner implements IFormWidget, IFormWidgetSettable {\n  private element: HTMLElement;\n  public name: string;\n\n  public static doExport() {\n    exportGlobally({\n      NumericSpinner: NumericSpinner\n    });\n  }\n\n  /**\n   * Creates a new `NumericSpinner`.\n   * @param onChange The function to call when the numeric spinner value changes. This function takes the current\n   * `NumericSpinner` instance as an argument.\n   * @param min The minimum possible value of the numeric spinner.\n   * @param max The maximum possible value of the numeric spinner.\n   * @param label The label to use for the input for accessibility purposes.\n   */\n  constructor(\n    public onChange: (numericSpinner: NumericSpinner) => void = (numericSpinner: NumericSpinner) => {},\n    public min: number = 0,\n    public max?: number,\n    private label?: string\n  ) {\n    this.buildContent();\n    this.bindEvents();\n  }\n\n  /**\n   * Resets the numeric spinner.\n   */\n  public reset() {\n    this.getSpinnerInput().value = '';\n    this.onChange(this);\n  }\n\n  /**\n   * Gets the element on which the numeric spinner is bound.\n   * @returns {HTMLInputElement} The numeric spinner element.\n   */\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  /**\n   * Gets the numeric spinner currently selected value (as a string).\n   * @returns {string} The numeric spinner value.\n   */\n  public getValue(): string {\n    return this.getSpinnerInput().value;\n  }\n\n  /**\n   * Gets the numeric spinner currently selected value (as an integer).\n   * @returns {number} The numeric spinner value.\n   */\n  public getIntValue(): number {\n    return this.getSpinnerInput().value ? parseInt(this.getSpinnerInput().value, 10) : this.min;\n  }\n\n  /**\n   * Gets the numeric spinner currently selected value (as a float).\n   * @returns {number} The numeric spinner value.\n   */\n  public getFloatValue(): number {\n    return this.getSpinnerInput().value ? parseFloat(this.getSpinnerInput().value) : this.min;\n  }\n\n  /**\n   * Sets the numeric spinner value.\n   *\n   * @param value The value to set the numeric spinner to. If `value` is greater than [`max`]{@link NumericSpinner.max},\n   * this method sets the numeric spinner to its maximum value instead. Likewise, if value is lesser than\n   * [`min`]{@link NumericSpinner.min}, the method sets the numeric spinner to its minimum value.\n   */\n  public setValue(value: number) {\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    if (value < this.min) {\n      value = this.min;\n    }\n    this.getSpinnerInput().value = value.toString();\n    this.onChange(this);\n  }\n\n  /**\n   * Gets the element on which the numeric spinner is bound.\n   * @returns {HTMLInputElement} The numeric spinner element.\n   */\n  public build() {\n    return this.element;\n  }\n\n  private buildContent() {\n    const numericSpinner = $$('div', { className: 'coveo-numeric-spinner' });\n    const numberInput = $$('input', {\n      className: 'coveo-number-input',\n      type: 'text',\n      'aria-label': this.label ? l(this.label) : ''\n    });\n\n    const addOn = $$('span', { className: 'coveo-add-on' });\n    const arrowUp = $$('div', { className: 'coveo-spinner-up' }, SVGIcons.icons.arrowUp);\n    SVGDom.addClassToSVGInContainer(arrowUp.el, 'coveo-spinner-up-svg');\n    const arrowDown = $$('div', { className: 'coveo-spinner-down' }, SVGIcons.icons.arrowDown);\n    SVGDom.addClassToSVGInContainer(arrowDown.el, 'coveo-spinner-down-svg');\n    addOn.append(arrowUp.el);\n    addOn.append(arrowDown.el);\n    numericSpinner.append(numberInput.el);\n    numericSpinner.append(addOn.el);\n    this.element = numericSpinner.el;\n  }\n\n  private bindEvents() {\n    const up = $$(this.element).find('.coveo-spinner-up');\n    $$(up).on('click', () => {\n      this.setValue(this.getFloatValue() + 1);\n    });\n\n    const down = $$(this.element).find('.coveo-spinner-down');\n    $$(down).on('click', () => {\n      this.setValue(this.getFloatValue() - 1);\n    });\n\n    const numberInput = <HTMLInputElement>$$(this.element).find('input');\n    $$(numberInput).on('input', () => {\n      if (numberInput.value.match(/[0-9]*/)) {\n        this.onChange(this);\n      }\n    });\n  }\n\n  private getSpinnerInput(): HTMLInputElement {\n    return <HTMLInputElement>$$(this.element).find('.coveo-number-input');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/NumericSpinner.ts"],"sourceRoot":""}