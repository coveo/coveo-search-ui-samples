{"version":3,"sources":["./src/ui/FacetValueSuggestions/FacetValueSuggestions.ts","./src/misc/SuggestionsCache.ts","./sass/_FieldSuggestions.scss","./src/ui/FacetValueSuggestions/FacetValueSuggestionsProvider.ts"],"names":[],"mappings":"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","file":"FacetValueSuggestions__5d8084491af1464dbdb6.js","sourcesContent":["import { Omnibox, IOmniboxSuggestion } from '../Omnibox/Omnibox';\nimport { Component } from '../Base/Component';\nimport { ComponentOptions, IFieldOption } from '../Base/ComponentOptions';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { OmniboxEvents, IPopulateOmniboxSuggestionsEventArgs } from '../../events/OmniboxEvents';\nimport { Initialization } from '../Base/Initialization';\nimport { analyticsActionCauseList, IAnalyticsNoMeta } from '../Analytics/AnalyticsActionListMeta';\nimport { $$ } from '../../utils/Dom';\nimport { exportGlobally } from '../../GlobalExports';\nimport 'styling/_FieldSuggestions';\nimport * as _ from 'underscore';\nimport { SuggestionsCache } from '../../misc/SuggestionsCache';\nimport { QueryStateModel } from '../../ModelsModules';\nimport { DomUtils } from '../../UtilsModules';\nimport { IFacetValueSuggestionRow, FacetValueSuggestionsProvider, IFacetValueSuggestionsProvider } from './FacetValueSuggestionsProvider';\nimport { l } from '../../MiscModules';\n\nexport interface IFacetValueSuggestionsOptions {\n  numberOfSuggestions: number;\n  field?: IFieldOption;\n  useQuerySuggestions?: boolean;\n  useValueFromSearchbox?: boolean;\n  displayEstimateNumberOfResults?: boolean;\n  templateHelper?: (row: IFacetValueSuggestionRow, omnibox: Omnibox) => string;\n}\n\n/**\n * The `FieldValueSuggestions` component provides query suggestions based on a particular field values.\n *\n * For example, if you use a `@category` field, this component will provide suggestions for categories that returns results for the given keywords.\n *\n * The query suggestions provided by this component appear in the [`Omnibox`]{@link Omnibox} component.\n */\nexport class FacetValueSuggestions extends Component {\n  static ID = 'FacetValueSuggestions';\n\n  static doExport = () => {\n    exportGlobally({\n      FacetValueSuggestions: FacetValueSuggestions\n    });\n  };\n\n  /**\n   * @componentOptions\n   */\n  static options: IFacetValueSuggestionsOptions = {\n    /**\n     * Specifies the facet field from which to provide suggestions.\n     *\n     * Specifying a value for this option is required for the `FieldValueSuggestions` component to work.\n     */\n    field: ComponentOptions.buildFieldOption({ required: true }),\n\n    /**\n     * Specifies the number of suggestions to render in the [`Omnibox`]{@link Omnibox}.\n     *\n     * Default value is `5`. Minimum value is `1`.\n     */\n    numberOfSuggestions: ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1 }),\n\n    /**\n     * Specifies whether to use query suggestions as keywords to get facet values suggestions.\n     *\n     * Default value is `true`.\n     *\n     * **Note:**\n     * This option requires that the `enableQuerySuggestAddon` is set to `true` in the [`Omnibox`]{@link Omnibox} component.\n     */\n    useQuerySuggestions: ComponentOptions.buildBooleanOption({ defaultValue: true }),\n\n    /**\n     * Specifies whether to use the current value from the search box to get facet values suggestions.\n     *\n     * Default value is `true` if [`useQuerySuggestions`]{@link useQuerySuggestions} is disabled, `false` otherwise.\n     */\n    useValueFromSearchbox: ComponentOptions.buildBooleanOption({\n      postProcessing: (value, options: IFacetValueSuggestionsOptions) => {\n        return value || !options.useQuerySuggestions;\n      }\n    }),\n\n    /**\n     * Specifies whether to display the number of results in each of the suggestions.\n     *\n     * Default value is `false`.\n     *\n     * **Note:**\n     * The number of results is an estimate.\n     *\n     * On a Standalone Search Interface, if you are redirecting on a Search Interface that has different filters,\n     *  the number of results on the Standalone Search Interface will be inaccurate.\n     *\n     * Setting this option has no effect when the `templateHelper` options is set.\n     */\n    displayEstimateNumberOfResults: ComponentOptions.buildBooleanOption({ defaultValue: false }),\n\n    /**\n     * Specifies the helper function to execute when generating suggestions shown to the end user in the\n     * [`Omnibox`]{@link Omnibox}.\n     *\n     * If not specified, a default template will be used.\n     *\n     * **Note:**\n     * > You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\n     * > [`init`]{@link init} call of your search interface (see\n     * > [Components - Passing Component Options in the init Call](https://developers.coveo.com/x/PoGfAQ#Components-PassingComponentOptionsintheinitCall)),\n     * > or before the `init` call, using the `options` top-level function (see\n     * > [Components - Passing Component Options Before the init Call](https://developers.coveo.com/x/PoGfAQ#Components-PassingComponentOptionsBeforetheinitCall)).\n     *\n     * **Example:**\n     *\n     * ```javascript\n     *\n     * var suggestionTemplate = function(row, omnibox) {\n     *   return \"Searching for \" + row.keyword + \" in category \" + row.value;\n     * };\n     *\n     * // You can set the option in the 'init' call:\n     * Coveo.init(document.querySelector(\"#search\"), {\n     *    FacetValueSuggestions : {\n     *      templateHelper : suggestionTemplate\n     *    }\n     * });\n     *\n     * // Or before the 'init' call, using the 'options' top-level function:\n     * // Coveo.options(document.querySelector(\"#search\"), {\n     * //   FacetValueSuggestions : {\n     * //     templateHelper : suggestionTemplate\n     * //   }\n     * // });\n     * ```\n     */\n    templateHelper: ComponentOptions.buildCustomOption<(row: IFacetValueSuggestionRow, omnibox: Omnibox) => string>(() => {\n      return null;\n    })\n  };\n\n  public fieldValueCache: SuggestionsCache<IFacetValueSuggestionRow[]> = new SuggestionsCache();\n\n  public facetValueSuggestionsProvider: IFacetValueSuggestionsProvider;\n\n  private queryStateFieldFacetId;\n\n  static defaultTemplate(this: FacetValueSuggestions, row: IFacetValueSuggestionRow, omnibox: Omnibox): string {\n    const keyword = DomUtils.highlightElement(row.keyword, omnibox.getText(), 'coveo-omnibox-hightlight2');\n    const facetValue = DomUtils.highlightElement(row.value, row.value, 'coveo-omnibox-hightlight');\n    const details = this.options.displayEstimateNumberOfResults ? ` (${l('ResultCount', row.numberOfResults.toString())})` : '';\n    return `${l('KeywordInCategory', keyword, facetValue)}${details}`;\n  }\n\n  /**\n   * Creates a new `FieldSuggestions` component.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the `FieldSuggestions` component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   */\n  constructor(element: HTMLElement, public options: IFacetValueSuggestionsOptions, bindings?: IComponentBindings) {\n    super(element, FacetValueSuggestions.ID, bindings);\n\n    this.options = ComponentOptions.initComponentOptions(element, FacetValueSuggestions, options);\n\n    this.facetValueSuggestionsProvider = new FacetValueSuggestionsProvider(this.queryController, {\n      field: <string>this.options.field\n    });\n    this.queryStateFieldFacetId = `f:${this.options.field}`;\n\n    if (!this.options.templateHelper) {\n      this.options.templateHelper = FacetValueSuggestions.defaultTemplate;\n    }\n\n    $$(this.root).on(OmniboxEvents.populateOmniboxSuggestions, (e: Event, args: IPopulateOmniboxSuggestionsEventArgs) => {\n      args.suggestions.push(this.getSuggestions(args.omnibox));\n    });\n  }\n\n  public async getSuggestions(omnibox: Omnibox): Promise<IOmniboxSuggestion[]> {\n    if (this.options.numberOfSuggestions == 0) {\n      return [];\n    }\n\n    const text = omnibox.getText();\n\n    const suggestions: IOmniboxSuggestion[] = await this.getFacetValueSuggestions(text, omnibox);\n\n    return suggestions || [];\n  }\n\n  private async getQuerySuggestionsKeywords(omnibox: Omnibox): Promise<string[]> {\n    if (this.options.useQuerySuggestions && omnibox.suggestionAddon) {\n      const suggestions = (await omnibox.suggestionAddon.getSuggestion()) || [];\n      return suggestions.map(s => s.text);\n    } else {\n      return [];\n    }\n  }\n\n  private async getFacetValueSuggestions(text: string, omnibox: Omnibox): Promise<IOmniboxSuggestion[]> {\n    const wordsToQuery = this.options.useValueFromSearchbox ? [text] : [];\n\n    const suggestionsKeywords: string[] = await this.getQuerySuggestionsKeywords(omnibox);\n    const allWordsToQuery = _.unique(wordsToQuery.concat(suggestionsKeywords).filter(value => value != ''));\n\n    if (allWordsToQuery.length === 0) {\n      return [];\n    }\n\n    return this.getSuggestionsForWords(allWordsToQuery, omnibox);\n  }\n\n  private async getSuggestionsForWords(wordsToQuery: string[], omnibox: Omnibox): Promise<IOmniboxSuggestion[]> {\n    try {\n      const suggestions = await this.fieldValueCache.getSuggestions(`fv${wordsToQuery.join('')}`, () =>\n        this.facetValueSuggestionsProvider.getSuggestions(wordsToQuery)\n      );\n\n      this.logger.debug('FacetValue Suggestions Results', suggestions);\n\n      const currentSelectedValues: string[] = this.queryStateModel.get(this.queryStateFieldFacetId) || [];\n      const filteredSuggestions = suggestions.filter(suggestion =>\n        this.isSuggestionRowAlreadyCheckedInFacet(suggestion, currentSelectedValues)\n      );\n      return this.rankSuggestionRows(filteredSuggestions).map(result => this.mapFacetValueSuggestion(result, omnibox));\n    } catch (error) {\n      this.logger.error(error);\n      return [];\n    }\n  }\n\n  private isSuggestionRowAlreadyCheckedInFacet(suggestion: IFacetValueSuggestionRow, currentlySelectedValues: string[]): boolean {\n    return !currentlySelectedValues.some(value => value == suggestion.value);\n  }\n\n  private rankSuggestionRows(suggestions: IFacetValueSuggestionRow[]): IFacetValueSuggestionRow[] {\n    const rankedResults = [...suggestions.sort((a, b) => b.score.distanceFromTotalForField - a.score.distanceFromTotalForField)];\n    const firstSlice = Math.ceil(this.options.numberOfSuggestions / 2);\n    const lastSlice = -Math.floor(this.options.numberOfSuggestions / 2);\n\n    const firstResultsToReturn = rankedResults.splice(0, firstSlice);\n\n    if (lastSlice != 0) {\n      const lastResultsToReturn = rankedResults.slice(lastSlice);\n      return [...firstResultsToReturn, ...lastResultsToReturn];\n    }\n\n    return firstResultsToReturn;\n  }\n\n  private mapFacetValueSuggestion(resultToShow: IFacetValueSuggestionRow, omnibox: Omnibox) {\n    return <IOmniboxSuggestion>{\n      html: this.buildDisplayNameForRow(resultToShow, omnibox),\n      onSelect: () => this.onRowSelection(resultToShow, omnibox)\n    };\n  }\n\n  private buildDisplayNameForRow(row: IFacetValueSuggestionRow, omnibox: Omnibox): string {\n    try {\n      return this.options.templateHelper.call(this, row, omnibox);\n    } catch (ex) {\n      this.logger.error('Could not apply template from options for the given row. Will use default template.', ex, row, omnibox);\n      return FacetValueSuggestions.defaultTemplate.call(this, row, omnibox);\n    }\n  }\n\n  private onRowSelection(row: IFacetValueSuggestionRow, omnibox: Omnibox): void {\n    omnibox.setText(row.keyword);\n    // Copy the state here, else it will directly modify queryStateModel.defaultAttributes.fv.\n    const fvState: { [key: string]: string[] } = { ...this.queryStateModel.get(QueryStateModel.attributesEnum.fv) };\n    const existingValues: string[] = fvState[this.options.field.toString()] || [];\n    fvState[this.options.field.toString()] = existingValues.concat([row.value]);\n    this.queryStateModel.set(QueryStateModel.attributesEnum.fv, fvState);\n    omnibox.magicBox.blur();\n    this.usageAnalytics.logSearchEvent<IAnalyticsNoMeta>(analyticsActionCauseList.omniboxField, {});\n    this.queryController.executeQuery();\n  }\n}\n\nInitialization.registerAutoCreateComponent(FacetValueSuggestions);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FacetValueSuggestions/FacetValueSuggestions.ts","export class SuggestionsCache<T> {\n  private cache: { [hash: string]: Promise<T> } = {};\n\n  getSuggestions(hash: string, suggestionsFetcher: () => Promise<T>): Promise<T> {\n    if (this.cache[hash] != null) {\n      return this.cache[hash];\n    }\n\n    const promise = suggestionsFetcher();\n    this.cache[hash] = promise;\n    promise.catch(() => this.clearSuggestion(hash));\n    return this.cache[hash];\n  }\n\n  clearSuggestion(hash: string): void {\n    if (!hash || hash.length === 0) {\n      return null;\n    }\n\n    delete this.cache[hash];\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc/SuggestionsCache.ts","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/_FieldSuggestions.scss\n// module id = 367\n// module chunks = 35 48 77","import { IIndexFieldValue } from '../../rest/FieldValue';\nimport { IListFieldValuesRequest } from '../../rest/ListFieldValuesRequest';\nimport { QueryController } from '../../Core';\nimport { IFieldOption } from '../Base/ComponentOptions';\n\n/**\n * Used to define a row returned by an [`IFacetValueSuggestionsProvider`]{@link IFacetValueSuggestionsProvider}.\n */\nexport interface IFacetValueSuggestionRow {\n  /**\n   * The score computed by the suggestions provider.\n   *\n   * A higher score means the results is more relevant.\n   */\n  score: IFacetValueSuggestionScore;\n\n  /**\n   * The field value returned by the suggestion that should be used to filter the results.\n   */\n  value: string;\n  /**\n   * The number of results matching the value for the given keyword.\n   */\n  numberOfResults: number;\n  /**\n   * The keyword that was used in the query to retrieve results.\n   */\n  keyword: string;\n  /**\n   * The field that was used for the suggestions.\n   */\n  field: IFieldOption;\n}\n\nexport interface IFacetValueSuggestionScore {\n  distanceFromTotalForField: number;\n}\n\ninterface IFacetValueSuggestionsResponse {\n  responses: IFacetValueBatchResponse[];\n  reference: IFacetValueReference;\n}\n\ninterface IFacetValueBatchResponse {\n  values: IIndexFieldValue[];\n  keyword: string;\n}\n\ntype IFacetValueReference = {\n  fieldsTotal: { [value: string]: number };\n  smallestTotal: number;\n};\n\n/**\n * Defines options for the [`FacetValueSuggestions`]{@link FacetValueSuggestions} component.\n */\nexport interface IFacetValueSuggestionsProviderOptions {\n  field: string;\n}\n\n/**\n * Provides suggestions for the [`FacetValueSuggestions`]{@link FacetValueSuggestions} component.\n */\nexport interface IFacetValueSuggestionsProvider {\n  getSuggestions(valuesToSearch: string[]): Promise<IFacetValueSuggestionRow[]>;\n}\n\nexport class FacetValueSuggestionsProvider implements IFacetValueSuggestionsProvider {\n  constructor(private queryController: QueryController, private options: IFacetValueSuggestionsProviderOptions) {}\n\n  public async getSuggestions(valuesToSearch: string[]): Promise<IFacetValueSuggestionRow[]> {\n    const fieldsToQuery = await this.getFieldValuesToQuery(valuesToSearch);\n    return this.getAllSuggestionsRows(fieldsToQuery.responses, fieldsToQuery.reference);\n  }\n\n  private getAllSuggestionsRows(\n    fieldResponses: IFacetValueBatchResponse[],\n    fieldTotalReference: IFacetValueReference\n  ): IFacetValueSuggestionRow[] {\n    return fieldResponses.reduce((allValues, fieldResponse) => {\n      const suggestionRows = fieldResponse.values.map(indexFieldValue => {\n        return <IFacetValueSuggestionRow>{\n          numberOfResults: indexFieldValue.numberOfResults,\n          keyword: fieldResponse.keyword,\n          value: indexFieldValue.value,\n          score: this.computeScoreForSuggestionRow(indexFieldValue, fieldTotalReference),\n          field: this.options.field\n        };\n      });\n      return allValues.concat(suggestionRows);\n    }, []);\n  }\n\n  private async getFieldValuesToQuery(valuesToSearch: string[]): Promise<IFacetValueSuggestionsResponse> {\n    // The reference request will be used to get the maximum number of values for a given facet value.\n    const referenceValuesRequest = this.buildReferenceFieldValueRequest();\n    const queryParts = this.getQueryToExecuteParts();\n    const suggestionValuesRequests = valuesToSearch.map(value => this.buildListFieldValueRequest([...queryParts, value].join(' ')));\n    const requests = [...suggestionValuesRequests, referenceValuesRequest];\n    const values = await this.queryController.getEndpoint().listFieldValuesBatch({\n      batch: requests\n    });\n\n    const reference = this.computeReferenceFromBatch(values.pop());\n    const responses: IFacetValueBatchResponse[] = values.map((value, i) => {\n      return <IFacetValueBatchResponse>{\n        keyword: valuesToSearch[i],\n        values: value\n      };\n    });\n\n    return <IFacetValueSuggestionsResponse>{\n      responses,\n      reference\n    };\n  }\n\n  private computeScoreForSuggestionRow(fieldValue: IIndexFieldValue, reference: IFacetValueReference): IFacetValueSuggestionScore {\n    const totalNumberForFieldValue = reference.fieldsTotal[fieldValue.value] || reference.smallestTotal;\n    const distanceFromTotalForField: number = (totalNumberForFieldValue - fieldValue.numberOfResults) / totalNumberForFieldValue * 100;\n    return {\n      distanceFromTotalForField\n    };\n  }\n\n  private computeReferenceFromBatch(batch: IIndexFieldValue[]): IFacetValueReference {\n    const fieldsTotal = {};\n    batch.forEach(value => (fieldsTotal[value.value] = value.numberOfResults));\n    return {\n      fieldsTotal: fieldsTotal,\n      smallestTotal: batch[batch.length - 1].numberOfResults\n    };\n  }\n\n  private buildListFieldValueRequest(queryToExecute: string): IListFieldValuesRequest {\n    return {\n      field: <string>this.options.field,\n      ignoreAccents: true,\n      maximumNumberOfValues: 3,\n      queryOverride: queryToExecute\n    };\n  }\n\n  private buildReferenceFieldValueRequest(): IListFieldValuesRequest {\n    return {\n      field: <string>this.options.field\n    };\n  }\n\n  private getQueryToExecuteParts(): string[] {\n    const lastQuery = this.queryController.getLastQuery();\n    const aqWithoutCurrentField =\n      lastQuery && lastQuery.aq ? this.removeFieldExpressionFromExpression(this.options.field.toString(), lastQuery.aq) : '';\n\n    return [aqWithoutCurrentField, lastQuery.cq].filter(part => !!part);\n  }\n\n  private removeFieldExpressionFromExpression(field: string, expression: string): string {\n    const expressionWithParenthesis = '([^)]*)';\n    const expressionAsSingleValue = '[^ ]*';\n    return expression\n      .replace(new RegExp(`${field}==${expressionWithParenthesis}`, 'gi'), '')\n      .replace(new RegExp(`${field}==${expressionAsSingleValue}`, 'gi'), '');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FacetValueSuggestions/FacetValueSuggestionsProvider.ts"],"sourceRoot":""}